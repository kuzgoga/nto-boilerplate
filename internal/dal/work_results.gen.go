// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"github.com/kuzgoga/nto-boilerplate/internal/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWorkResult(db *gorm.DB, opts ...gen.DOOption) workResult {
	_workResult := workResult{}

	_workResult.workResultDo.UseDB(db, opts...)
	_workResult.workResultDo.UseModel(&models.WorkResult{})

	tableName := _workResult.workResultDo.TableName()
	_workResult.ALL = field.NewAsterisk(tableName)
	_workResult.Id = field.NewUint(tableName, "id")
	_workResult.MaterialId = field.NewUint(tableName, "material_id")
	_workResult.MaterialQuantity = field.NewInt(tableName, "material_quantity")
	_workResult.ProductSpecId = field.NewInt(tableName, "product_spec_id")
	_workResult.WorkDate = field.NewInt64(tableName, "work_date")
	_workResult.Material = workResultBelongsToMaterial{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Material", "models.WoodSpecType"),
		Receivers: struct {
			field.RelationField
			Exporter struct {
				field.RelationField
				Receivers struct {
					field.RelationField
				}
			}
			Spec struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Material.Receivers", "models.Receiver"),
			Exporter: struct {
				field.RelationField
				Receivers struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Material.Receivers.Exporter", "models.Exporter"),
				Receivers: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Material.Receivers.Exporter.Receivers", "models.Receiver"),
				},
			},
			Spec: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Material.Receivers.Spec", "models.WoodSpecType"),
			},
		},
	}

	_workResult.ProductSpec = workResultBelongsToProductSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ProductSpec", "models.WoodSpec"),
		WoodSpecType: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ProductSpec.WoodSpecType", "models.WoodSpecType"),
		},
	}

	_workResult.fillFieldMap()

	return _workResult
}

type workResult struct {
	workResultDo

	ALL              field.Asterisk
	Id               field.Uint
	MaterialId       field.Uint
	MaterialQuantity field.Int
	ProductSpecId    field.Int
	WorkDate         field.Int64
	Material         workResultBelongsToMaterial

	ProductSpec workResultBelongsToProductSpec

	fieldMap map[string]field.Expr
}

func (w workResult) Table(newTableName string) *workResult {
	w.workResultDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workResult) As(alias string) *workResult {
	w.workResultDo.DO = *(w.workResultDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workResult) updateTableName(table string) *workResult {
	w.ALL = field.NewAsterisk(table)
	w.Id = field.NewUint(table, "id")
	w.MaterialId = field.NewUint(table, "material_id")
	w.MaterialQuantity = field.NewInt(table, "material_quantity")
	w.ProductSpecId = field.NewInt(table, "product_spec_id")
	w.WorkDate = field.NewInt64(table, "work_date")

	w.fillFieldMap()

	return w
}

func (w *workResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workResult) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.Id
	w.fieldMap["material_id"] = w.MaterialId
	w.fieldMap["material_quantity"] = w.MaterialQuantity
	w.fieldMap["product_spec_id"] = w.ProductSpecId
	w.fieldMap["work_date"] = w.WorkDate

}

func (w workResult) clone(db *gorm.DB) workResult {
	w.workResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workResult) replaceDB(db *gorm.DB) workResult {
	w.workResultDo.ReplaceDB(db)
	return w
}

type workResultBelongsToMaterial struct {
	db *gorm.DB

	field.RelationField

	Receivers struct {
		field.RelationField
		Exporter struct {
			field.RelationField
			Receivers struct {
				field.RelationField
			}
		}
		Spec struct {
			field.RelationField
		}
	}
}

func (a workResultBelongsToMaterial) Where(conds ...field.Expr) *workResultBelongsToMaterial {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workResultBelongsToMaterial) WithContext(ctx context.Context) *workResultBelongsToMaterial {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workResultBelongsToMaterial) Session(session *gorm.Session) *workResultBelongsToMaterial {
	a.db = a.db.Session(session)
	return &a
}

func (a workResultBelongsToMaterial) Model(m *models.WorkResult) *workResultBelongsToMaterialTx {
	return &workResultBelongsToMaterialTx{a.db.Model(m).Association(a.Name())}
}

type workResultBelongsToMaterialTx struct{ tx *gorm.Association }

func (a workResultBelongsToMaterialTx) Find() (result *models.WoodSpecType, err error) {
	return result, a.tx.Find(&result)
}

func (a workResultBelongsToMaterialTx) Append(values ...*models.WoodSpecType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workResultBelongsToMaterialTx) Replace(values ...*models.WoodSpecType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workResultBelongsToMaterialTx) Delete(values ...*models.WoodSpecType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workResultBelongsToMaterialTx) Clear() error {
	return a.tx.Clear()
}

func (a workResultBelongsToMaterialTx) Count() int64 {
	return a.tx.Count()
}

type workResultBelongsToProductSpec struct {
	db *gorm.DB

	field.RelationField

	WoodSpecType struct {
		field.RelationField
	}
}

func (a workResultBelongsToProductSpec) Where(conds ...field.Expr) *workResultBelongsToProductSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workResultBelongsToProductSpec) WithContext(ctx context.Context) *workResultBelongsToProductSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workResultBelongsToProductSpec) Session(session *gorm.Session) *workResultBelongsToProductSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a workResultBelongsToProductSpec) Model(m *models.WorkResult) *workResultBelongsToProductSpecTx {
	return &workResultBelongsToProductSpecTx{a.db.Model(m).Association(a.Name())}
}

type workResultBelongsToProductSpecTx struct{ tx *gorm.Association }

func (a workResultBelongsToProductSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a workResultBelongsToProductSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workResultBelongsToProductSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workResultBelongsToProductSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workResultBelongsToProductSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a workResultBelongsToProductSpecTx) Count() int64 {
	return a.tx.Count()
}

type workResultDo struct{ gen.DO }

type IWorkResultDo interface {
	gen.SubQuery
	Debug() IWorkResultDo
	WithContext(ctx context.Context) IWorkResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkResultDo
	WriteDB() IWorkResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkResultDo
	Not(conds ...gen.Condition) IWorkResultDo
	Or(conds ...gen.Condition) IWorkResultDo
	Select(conds ...field.Expr) IWorkResultDo
	Where(conds ...gen.Condition) IWorkResultDo
	Order(conds ...field.Expr) IWorkResultDo
	Distinct(cols ...field.Expr) IWorkResultDo
	Omit(cols ...field.Expr) IWorkResultDo
	Join(table schema.Tabler, on ...field.Expr) IWorkResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkResultDo
	Group(cols ...field.Expr) IWorkResultDo
	Having(conds ...gen.Condition) IWorkResultDo
	Limit(limit int) IWorkResultDo
	Offset(offset int) IWorkResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkResultDo
	Unscoped() IWorkResultDo
	Create(values ...*models.WorkResult) error
	CreateInBatches(values []*models.WorkResult, batchSize int) error
	Save(values ...*models.WorkResult) error
	First() (*models.WorkResult, error)
	Take() (*models.WorkResult, error)
	Last() (*models.WorkResult, error)
	Find() ([]*models.WorkResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WorkResult, err error)
	FindInBatches(result *[]*models.WorkResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.WorkResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkResultDo
	Assign(attrs ...field.AssignExpr) IWorkResultDo
	Joins(fields ...field.RelationField) IWorkResultDo
	Preload(fields ...field.RelationField) IWorkResultDo
	FirstOrInit() (*models.WorkResult, error)
	FirstOrCreate() (*models.WorkResult, error)
	FindByPage(offset int, limit int) (result []*models.WorkResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workResultDo) Debug() IWorkResultDo {
	return w.withDO(w.DO.Debug())
}

func (w workResultDo) WithContext(ctx context.Context) IWorkResultDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workResultDo) ReadDB() IWorkResultDo {
	return w.Clauses(dbresolver.Read)
}

func (w workResultDo) WriteDB() IWorkResultDo {
	return w.Clauses(dbresolver.Write)
}

func (w workResultDo) Session(config *gorm.Session) IWorkResultDo {
	return w.withDO(w.DO.Session(config))
}

func (w workResultDo) Clauses(conds ...clause.Expression) IWorkResultDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workResultDo) Returning(value interface{}, columns ...string) IWorkResultDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workResultDo) Not(conds ...gen.Condition) IWorkResultDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workResultDo) Or(conds ...gen.Condition) IWorkResultDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workResultDo) Select(conds ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workResultDo) Where(conds ...gen.Condition) IWorkResultDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workResultDo) Order(conds ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workResultDo) Distinct(cols ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workResultDo) Omit(cols ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workResultDo) Join(table schema.Tabler, on ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workResultDo) Group(cols ...field.Expr) IWorkResultDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workResultDo) Having(conds ...gen.Condition) IWorkResultDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workResultDo) Limit(limit int) IWorkResultDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workResultDo) Offset(offset int) IWorkResultDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkResultDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workResultDo) Unscoped() IWorkResultDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workResultDo) Create(values ...*models.WorkResult) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workResultDo) CreateInBatches(values []*models.WorkResult, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workResultDo) Save(values ...*models.WorkResult) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workResultDo) First() (*models.WorkResult, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkResult), nil
	}
}

func (w workResultDo) Take() (*models.WorkResult, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkResult), nil
	}
}

func (w workResultDo) Last() (*models.WorkResult, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkResult), nil
	}
}

func (w workResultDo) Find() ([]*models.WorkResult, error) {
	result, err := w.DO.Find()
	return result.([]*models.WorkResult), err
}

func (w workResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WorkResult, err error) {
	buf := make([]*models.WorkResult, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workResultDo) FindInBatches(result *[]*models.WorkResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workResultDo) Attrs(attrs ...field.AssignExpr) IWorkResultDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workResultDo) Assign(attrs ...field.AssignExpr) IWorkResultDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workResultDo) Joins(fields ...field.RelationField) IWorkResultDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workResultDo) Preload(fields ...field.RelationField) IWorkResultDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workResultDo) FirstOrInit() (*models.WorkResult, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkResult), nil
	}
}

func (w workResultDo) FirstOrCreate() (*models.WorkResult, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkResult), nil
	}
}

func (w workResultDo) FindByPage(offset int, limit int) (result []*models.WorkResult, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workResultDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workResultDo) Delete(models ...*models.WorkResult) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workResultDo) withDO(do gen.Dao) *workResultDo {
	w.DO = *do.(*gen.DO)
	return w
}
