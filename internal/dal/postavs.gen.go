// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"github.com/kuzgoga/nto-boilerplate/internal/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPostav(db *gorm.DB, opts ...gen.DOOption) postav {
	_postav := postav{}

	_postav.postavDo.UseDB(db, opts...)
	_postav.postavDo.UseModel(&models.Postav{})

	tableName := _postav.postavDo.TableName()
	_postav.ALL = field.NewAsterisk(tableName)
	_postav.Id = field.NewUint(tableName, "id")
	_postav.Name = field.NewString(tableName, "name")
	_postav.CenterDoskaSpecId = field.NewInt(tableName, "center_doska_spec_id")
	_postav.CenterOutPercent = field.NewInt(tableName, "center_out_percent")
	_postav.BacksideDoskaSpecId = field.NewInt(tableName, "backside_doska_spec_id")
	_postav.BacksideOutPercent = field.NewInt(tableName, "backside_out_percent")
	_postav.OpilkiSpecId = field.NewInt(tableName, "opilki_spec_id")
	_postav.OpilkiOutPercent = field.NewInt(tableName, "opilki_out_percent")
	_postav.CenterDoskaSpec = postavBelongsToCenterDoskaSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CenterDoskaSpec", "models.WoodSpec"),
		WoodSpecType: struct {
			field.RelationField
			Receivers struct {
				field.RelationField
				Exporter struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}
				Spec struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("CenterDoskaSpec.WoodSpecType", "models.WoodSpecType"),
			Receivers: struct {
				field.RelationField
				Exporter struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}
				Spec struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("CenterDoskaSpec.WoodSpecType.Receivers", "models.Receiver"),
				Exporter: struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CenterDoskaSpec.WoodSpecType.Receivers.Exporter", "models.Exporter"),
					Receivers: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CenterDoskaSpec.WoodSpecType.Receivers.Exporter.Receivers", "models.Receiver"),
					},
				},
				Spec: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CenterDoskaSpec.WoodSpecType.Receivers.Spec", "models.WoodSpecType"),
				},
			},
		},
	}

	_postav.BacksideDoskaSpec = postavBelongsToBacksideDoskaSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BacksideDoskaSpec", "models.WoodSpec"),
	}

	_postav.OpilkiSpec = postavBelongsToOpilkiSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OpilkiSpec", "models.WoodSpec"),
	}

	_postav.fillFieldMap()

	return _postav
}

type postav struct {
	postavDo

	ALL                 field.Asterisk
	Id                  field.Uint
	Name                field.String
	CenterDoskaSpecId   field.Int
	CenterOutPercent    field.Int
	BacksideDoskaSpecId field.Int
	BacksideOutPercent  field.Int
	OpilkiSpecId        field.Int
	OpilkiOutPercent    field.Int
	CenterDoskaSpec     postavBelongsToCenterDoskaSpec

	BacksideDoskaSpec postavBelongsToBacksideDoskaSpec

	OpilkiSpec postavBelongsToOpilkiSpec

	fieldMap map[string]field.Expr
}

func (p postav) Table(newTableName string) *postav {
	p.postavDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postav) As(alias string) *postav {
	p.postavDo.DO = *(p.postavDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postav) updateTableName(table string) *postav {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewUint(table, "id")
	p.Name = field.NewString(table, "name")
	p.CenterDoskaSpecId = field.NewInt(table, "center_doska_spec_id")
	p.CenterOutPercent = field.NewInt(table, "center_out_percent")
	p.BacksideDoskaSpecId = field.NewInt(table, "backside_doska_spec_id")
	p.BacksideOutPercent = field.NewInt(table, "backside_out_percent")
	p.OpilkiSpecId = field.NewInt(table, "opilki_spec_id")
	p.OpilkiOutPercent = field.NewInt(table, "opilki_out_percent")

	p.fillFieldMap()

	return p
}

func (p *postav) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postav) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.Id
	p.fieldMap["name"] = p.Name
	p.fieldMap["center_doska_spec_id"] = p.CenterDoskaSpecId
	p.fieldMap["center_out_percent"] = p.CenterOutPercent
	p.fieldMap["backside_doska_spec_id"] = p.BacksideDoskaSpecId
	p.fieldMap["backside_out_percent"] = p.BacksideOutPercent
	p.fieldMap["opilki_spec_id"] = p.OpilkiSpecId
	p.fieldMap["opilki_out_percent"] = p.OpilkiOutPercent

}

func (p postav) clone(db *gorm.DB) postav {
	p.postavDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postav) replaceDB(db *gorm.DB) postav {
	p.postavDo.ReplaceDB(db)
	return p
}

type postavBelongsToCenterDoskaSpec struct {
	db *gorm.DB

	field.RelationField

	WoodSpecType struct {
		field.RelationField
		Receivers struct {
			field.RelationField
			Exporter struct {
				field.RelationField
				Receivers struct {
					field.RelationField
				}
			}
			Spec struct {
				field.RelationField
			}
		}
	}
}

func (a postavBelongsToCenterDoskaSpec) Where(conds ...field.Expr) *postavBelongsToCenterDoskaSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a postavBelongsToCenterDoskaSpec) WithContext(ctx context.Context) *postavBelongsToCenterDoskaSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a postavBelongsToCenterDoskaSpec) Session(session *gorm.Session) *postavBelongsToCenterDoskaSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a postavBelongsToCenterDoskaSpec) Model(m *models.Postav) *postavBelongsToCenterDoskaSpecTx {
	return &postavBelongsToCenterDoskaSpecTx{a.db.Model(m).Association(a.Name())}
}

type postavBelongsToCenterDoskaSpecTx struct{ tx *gorm.Association }

func (a postavBelongsToCenterDoskaSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a postavBelongsToCenterDoskaSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a postavBelongsToCenterDoskaSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a postavBelongsToCenterDoskaSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a postavBelongsToCenterDoskaSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a postavBelongsToCenterDoskaSpecTx) Count() int64 {
	return a.tx.Count()
}

type postavBelongsToBacksideDoskaSpec struct {
	db *gorm.DB

	field.RelationField
}

func (a postavBelongsToBacksideDoskaSpec) Where(conds ...field.Expr) *postavBelongsToBacksideDoskaSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a postavBelongsToBacksideDoskaSpec) WithContext(ctx context.Context) *postavBelongsToBacksideDoskaSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a postavBelongsToBacksideDoskaSpec) Session(session *gorm.Session) *postavBelongsToBacksideDoskaSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a postavBelongsToBacksideDoskaSpec) Model(m *models.Postav) *postavBelongsToBacksideDoskaSpecTx {
	return &postavBelongsToBacksideDoskaSpecTx{a.db.Model(m).Association(a.Name())}
}

type postavBelongsToBacksideDoskaSpecTx struct{ tx *gorm.Association }

func (a postavBelongsToBacksideDoskaSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a postavBelongsToBacksideDoskaSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a postavBelongsToBacksideDoskaSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a postavBelongsToBacksideDoskaSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a postavBelongsToBacksideDoskaSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a postavBelongsToBacksideDoskaSpecTx) Count() int64 {
	return a.tx.Count()
}

type postavBelongsToOpilkiSpec struct {
	db *gorm.DB

	field.RelationField
}

func (a postavBelongsToOpilkiSpec) Where(conds ...field.Expr) *postavBelongsToOpilkiSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a postavBelongsToOpilkiSpec) WithContext(ctx context.Context) *postavBelongsToOpilkiSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a postavBelongsToOpilkiSpec) Session(session *gorm.Session) *postavBelongsToOpilkiSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a postavBelongsToOpilkiSpec) Model(m *models.Postav) *postavBelongsToOpilkiSpecTx {
	return &postavBelongsToOpilkiSpecTx{a.db.Model(m).Association(a.Name())}
}

type postavBelongsToOpilkiSpecTx struct{ tx *gorm.Association }

func (a postavBelongsToOpilkiSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a postavBelongsToOpilkiSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a postavBelongsToOpilkiSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a postavBelongsToOpilkiSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a postavBelongsToOpilkiSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a postavBelongsToOpilkiSpecTx) Count() int64 {
	return a.tx.Count()
}

type postavDo struct{ gen.DO }

type IPostavDo interface {
	gen.SubQuery
	Debug() IPostavDo
	WithContext(ctx context.Context) IPostavDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostavDo
	WriteDB() IPostavDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostavDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostavDo
	Not(conds ...gen.Condition) IPostavDo
	Or(conds ...gen.Condition) IPostavDo
	Select(conds ...field.Expr) IPostavDo
	Where(conds ...gen.Condition) IPostavDo
	Order(conds ...field.Expr) IPostavDo
	Distinct(cols ...field.Expr) IPostavDo
	Omit(cols ...field.Expr) IPostavDo
	Join(table schema.Tabler, on ...field.Expr) IPostavDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostavDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostavDo
	Group(cols ...field.Expr) IPostavDo
	Having(conds ...gen.Condition) IPostavDo
	Limit(limit int) IPostavDo
	Offset(offset int) IPostavDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostavDo
	Unscoped() IPostavDo
	Create(values ...*models.Postav) error
	CreateInBatches(values []*models.Postav, batchSize int) error
	Save(values ...*models.Postav) error
	First() (*models.Postav, error)
	Take() (*models.Postav, error)
	Last() (*models.Postav, error)
	Find() ([]*models.Postav, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Postav, err error)
	FindInBatches(result *[]*models.Postav, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Postav) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostavDo
	Assign(attrs ...field.AssignExpr) IPostavDo
	Joins(fields ...field.RelationField) IPostavDo
	Preload(fields ...field.RelationField) IPostavDo
	FirstOrInit() (*models.Postav, error)
	FirstOrCreate() (*models.Postav, error)
	FindByPage(offset int, limit int) (result []*models.Postav, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostavDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postavDo) Debug() IPostavDo {
	return p.withDO(p.DO.Debug())
}

func (p postavDo) WithContext(ctx context.Context) IPostavDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postavDo) ReadDB() IPostavDo {
	return p.Clauses(dbresolver.Read)
}

func (p postavDo) WriteDB() IPostavDo {
	return p.Clauses(dbresolver.Write)
}

func (p postavDo) Session(config *gorm.Session) IPostavDo {
	return p.withDO(p.DO.Session(config))
}

func (p postavDo) Clauses(conds ...clause.Expression) IPostavDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postavDo) Returning(value interface{}, columns ...string) IPostavDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postavDo) Not(conds ...gen.Condition) IPostavDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postavDo) Or(conds ...gen.Condition) IPostavDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postavDo) Select(conds ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postavDo) Where(conds ...gen.Condition) IPostavDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postavDo) Order(conds ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postavDo) Distinct(cols ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postavDo) Omit(cols ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postavDo) Join(table schema.Tabler, on ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postavDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostavDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postavDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostavDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postavDo) Group(cols ...field.Expr) IPostavDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postavDo) Having(conds ...gen.Condition) IPostavDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postavDo) Limit(limit int) IPostavDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postavDo) Offset(offset int) IPostavDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postavDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostavDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postavDo) Unscoped() IPostavDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postavDo) Create(values ...*models.Postav) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postavDo) CreateInBatches(values []*models.Postav, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postavDo) Save(values ...*models.Postav) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postavDo) First() (*models.Postav, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Postav), nil
	}
}

func (p postavDo) Take() (*models.Postav, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Postav), nil
	}
}

func (p postavDo) Last() (*models.Postav, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Postav), nil
	}
}

func (p postavDo) Find() ([]*models.Postav, error) {
	result, err := p.DO.Find()
	return result.([]*models.Postav), err
}

func (p postavDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Postav, err error) {
	buf := make([]*models.Postav, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postavDo) FindInBatches(result *[]*models.Postav, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postavDo) Attrs(attrs ...field.AssignExpr) IPostavDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postavDo) Assign(attrs ...field.AssignExpr) IPostavDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postavDo) Joins(fields ...field.RelationField) IPostavDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postavDo) Preload(fields ...field.RelationField) IPostavDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postavDo) FirstOrInit() (*models.Postav, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Postav), nil
	}
}

func (p postavDo) FirstOrCreate() (*models.Postav, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Postav), nil
	}
}

func (p postavDo) FindByPage(offset int, limit int) (result []*models.Postav, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postavDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postavDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postavDo) Delete(models ...*models.Postav) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postavDo) withDO(do gen.Dao) *postavDo {
	p.DO = *do.(*gen.DO)
	return p
}
