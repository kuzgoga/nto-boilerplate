// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	DryMode      *dryMode
	Exporter     *exporter
	Postav       *postav
	Receiver     *receiver
	SushkaResult *sushkaResult
	WoodSpec     *woodSpec
	WoodSpecType *woodSpecType
	WorkResult   *workResult
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DryMode = &Q.DryMode
	Exporter = &Q.Exporter
	Postav = &Q.Postav
	Receiver = &Q.Receiver
	SushkaResult = &Q.SushkaResult
	WoodSpec = &Q.WoodSpec
	WoodSpecType = &Q.WoodSpecType
	WorkResult = &Q.WorkResult
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		DryMode:      newDryMode(db, opts...),
		Exporter:     newExporter(db, opts...),
		Postav:       newPostav(db, opts...),
		Receiver:     newReceiver(db, opts...),
		SushkaResult: newSushkaResult(db, opts...),
		WoodSpec:     newWoodSpec(db, opts...),
		WoodSpecType: newWoodSpecType(db, opts...),
		WorkResult:   newWorkResult(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DryMode      dryMode
	Exporter     exporter
	Postav       postav
	Receiver     receiver
	SushkaResult sushkaResult
	WoodSpec     woodSpec
	WoodSpecType woodSpecType
	WorkResult   workResult
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		DryMode:      q.DryMode.clone(db),
		Exporter:     q.Exporter.clone(db),
		Postav:       q.Postav.clone(db),
		Receiver:     q.Receiver.clone(db),
		SushkaResult: q.SushkaResult.clone(db),
		WoodSpec:     q.WoodSpec.clone(db),
		WoodSpecType: q.WoodSpecType.clone(db),
		WorkResult:   q.WorkResult.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		DryMode:      q.DryMode.replaceDB(db),
		Exporter:     q.Exporter.replaceDB(db),
		Postav:       q.Postav.replaceDB(db),
		Receiver:     q.Receiver.replaceDB(db),
		SushkaResult: q.SushkaResult.replaceDB(db),
		WoodSpec:     q.WoodSpec.replaceDB(db),
		WoodSpecType: q.WoodSpecType.replaceDB(db),
		WorkResult:   q.WorkResult.replaceDB(db),
	}
}

type queryCtx struct {
	DryMode      IDryModeDo
	Exporter     IExporterDo
	Postav       IPostavDo
	Receiver     IReceiverDo
	SushkaResult ISushkaResultDo
	WoodSpec     IWoodSpecDo
	WoodSpecType IWoodSpecTypeDo
	WorkResult   IWorkResultDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DryMode:      q.DryMode.WithContext(ctx),
		Exporter:     q.Exporter.WithContext(ctx),
		Postav:       q.Postav.WithContext(ctx),
		Receiver:     q.Receiver.WithContext(ctx),
		SushkaResult: q.SushkaResult.WithContext(ctx),
		WoodSpec:     q.WoodSpec.WithContext(ctx),
		WoodSpecType: q.WoodSpecType.WithContext(ctx),
		WorkResult:   q.WorkResult.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
