// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"github.com/kuzgoga/nto-boilerplate/internal/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSushkaResult(db *gorm.DB, opts ...gen.DOOption) sushkaResult {
	_sushkaResult := sushkaResult{}

	_sushkaResult.sushkaResultDo.UseDB(db, opts...)
	_sushkaResult.sushkaResultDo.UseModel(&models.SushkaResult{})

	tableName := _sushkaResult.sushkaResultDo.TableName()
	_sushkaResult.ALL = field.NewAsterisk(tableName)
	_sushkaResult.Id = field.NewUint(tableName, "id")
	_sushkaResult.Description = field.NewString(tableName, "description")
	_sushkaResult.MaterialSpecId = field.NewUint(tableName, "material_spec_id")
	_sushkaResult.MaterialQuantity = field.NewInt(tableName, "material_quantity")
	_sushkaResult.ProductSpecId = field.NewUint(tableName, "product_spec_id")
	_sushkaResult.ProductAmount = field.NewInt(tableName, "product_amount")
	_sushkaResult.WorkDate = field.NewInt64(tableName, "work_date")
	_sushkaResult.MaterialSpec = sushkaResultBelongsToMaterialSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MaterialSpec", "models.WoodSpec"),
		WoodSpecType: struct {
			field.RelationField
			Receivers struct {
				field.RelationField
				Exporter struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}
				Spec struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("MaterialSpec.WoodSpecType", "models.WoodSpecType"),
			Receivers: struct {
				field.RelationField
				Exporter struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}
				Spec struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MaterialSpec.WoodSpecType.Receivers", "models.Receiver"),
				Exporter: struct {
					field.RelationField
					Receivers struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MaterialSpec.WoodSpecType.Receivers.Exporter", "models.Exporter"),
					Receivers: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MaterialSpec.WoodSpecType.Receivers.Exporter.Receivers", "models.Receiver"),
					},
				},
				Spec: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MaterialSpec.WoodSpecType.Receivers.Spec", "models.WoodSpecType"),
				},
			},
		},
	}

	_sushkaResult.ProductSpec = sushkaResultBelongsToProductSpec{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ProductSpec", "models.WoodSpec"),
	}

	_sushkaResult.fillFieldMap()

	return _sushkaResult
}

type sushkaResult struct {
	sushkaResultDo

	ALL              field.Asterisk
	Id               field.Uint
	Description      field.String
	MaterialSpecId   field.Uint
	MaterialQuantity field.Int
	ProductSpecId    field.Uint
	ProductAmount    field.Int
	WorkDate         field.Int64
	MaterialSpec     sushkaResultBelongsToMaterialSpec

	ProductSpec sushkaResultBelongsToProductSpec

	fieldMap map[string]field.Expr
}

func (s sushkaResult) Table(newTableName string) *sushkaResult {
	s.sushkaResultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sushkaResult) As(alias string) *sushkaResult {
	s.sushkaResultDo.DO = *(s.sushkaResultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sushkaResult) updateTableName(table string) *sushkaResult {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewUint(table, "id")
	s.Description = field.NewString(table, "description")
	s.MaterialSpecId = field.NewUint(table, "material_spec_id")
	s.MaterialQuantity = field.NewInt(table, "material_quantity")
	s.ProductSpecId = field.NewUint(table, "product_spec_id")
	s.ProductAmount = field.NewInt(table, "product_amount")
	s.WorkDate = field.NewInt64(table, "work_date")

	s.fillFieldMap()

	return s
}

func (s *sushkaResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sushkaResult) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.Id
	s.fieldMap["description"] = s.Description
	s.fieldMap["material_spec_id"] = s.MaterialSpecId
	s.fieldMap["material_quantity"] = s.MaterialQuantity
	s.fieldMap["product_spec_id"] = s.ProductSpecId
	s.fieldMap["product_amount"] = s.ProductAmount
	s.fieldMap["work_date"] = s.WorkDate

}

func (s sushkaResult) clone(db *gorm.DB) sushkaResult {
	s.sushkaResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sushkaResult) replaceDB(db *gorm.DB) sushkaResult {
	s.sushkaResultDo.ReplaceDB(db)
	return s
}

type sushkaResultBelongsToMaterialSpec struct {
	db *gorm.DB

	field.RelationField

	WoodSpecType struct {
		field.RelationField
		Receivers struct {
			field.RelationField
			Exporter struct {
				field.RelationField
				Receivers struct {
					field.RelationField
				}
			}
			Spec struct {
				field.RelationField
			}
		}
	}
}

func (a sushkaResultBelongsToMaterialSpec) Where(conds ...field.Expr) *sushkaResultBelongsToMaterialSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sushkaResultBelongsToMaterialSpec) WithContext(ctx context.Context) *sushkaResultBelongsToMaterialSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sushkaResultBelongsToMaterialSpec) Session(session *gorm.Session) *sushkaResultBelongsToMaterialSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a sushkaResultBelongsToMaterialSpec) Model(m *models.SushkaResult) *sushkaResultBelongsToMaterialSpecTx {
	return &sushkaResultBelongsToMaterialSpecTx{a.db.Model(m).Association(a.Name())}
}

type sushkaResultBelongsToMaterialSpecTx struct{ tx *gorm.Association }

func (a sushkaResultBelongsToMaterialSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a sushkaResultBelongsToMaterialSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sushkaResultBelongsToMaterialSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sushkaResultBelongsToMaterialSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sushkaResultBelongsToMaterialSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a sushkaResultBelongsToMaterialSpecTx) Count() int64 {
	return a.tx.Count()
}

type sushkaResultBelongsToProductSpec struct {
	db *gorm.DB

	field.RelationField
}

func (a sushkaResultBelongsToProductSpec) Where(conds ...field.Expr) *sushkaResultBelongsToProductSpec {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sushkaResultBelongsToProductSpec) WithContext(ctx context.Context) *sushkaResultBelongsToProductSpec {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sushkaResultBelongsToProductSpec) Session(session *gorm.Session) *sushkaResultBelongsToProductSpec {
	a.db = a.db.Session(session)
	return &a
}

func (a sushkaResultBelongsToProductSpec) Model(m *models.SushkaResult) *sushkaResultBelongsToProductSpecTx {
	return &sushkaResultBelongsToProductSpecTx{a.db.Model(m).Association(a.Name())}
}

type sushkaResultBelongsToProductSpecTx struct{ tx *gorm.Association }

func (a sushkaResultBelongsToProductSpecTx) Find() (result *models.WoodSpec, err error) {
	return result, a.tx.Find(&result)
}

func (a sushkaResultBelongsToProductSpecTx) Append(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sushkaResultBelongsToProductSpecTx) Replace(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sushkaResultBelongsToProductSpecTx) Delete(values ...*models.WoodSpec) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sushkaResultBelongsToProductSpecTx) Clear() error {
	return a.tx.Clear()
}

func (a sushkaResultBelongsToProductSpecTx) Count() int64 {
	return a.tx.Count()
}

type sushkaResultDo struct{ gen.DO }

type ISushkaResultDo interface {
	gen.SubQuery
	Debug() ISushkaResultDo
	WithContext(ctx context.Context) ISushkaResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISushkaResultDo
	WriteDB() ISushkaResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISushkaResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISushkaResultDo
	Not(conds ...gen.Condition) ISushkaResultDo
	Or(conds ...gen.Condition) ISushkaResultDo
	Select(conds ...field.Expr) ISushkaResultDo
	Where(conds ...gen.Condition) ISushkaResultDo
	Order(conds ...field.Expr) ISushkaResultDo
	Distinct(cols ...field.Expr) ISushkaResultDo
	Omit(cols ...field.Expr) ISushkaResultDo
	Join(table schema.Tabler, on ...field.Expr) ISushkaResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISushkaResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISushkaResultDo
	Group(cols ...field.Expr) ISushkaResultDo
	Having(conds ...gen.Condition) ISushkaResultDo
	Limit(limit int) ISushkaResultDo
	Offset(offset int) ISushkaResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISushkaResultDo
	Unscoped() ISushkaResultDo
	Create(values ...*models.SushkaResult) error
	CreateInBatches(values []*models.SushkaResult, batchSize int) error
	Save(values ...*models.SushkaResult) error
	First() (*models.SushkaResult, error)
	Take() (*models.SushkaResult, error)
	Last() (*models.SushkaResult, error)
	Find() ([]*models.SushkaResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SushkaResult, err error)
	FindInBatches(result *[]*models.SushkaResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SushkaResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISushkaResultDo
	Assign(attrs ...field.AssignExpr) ISushkaResultDo
	Joins(fields ...field.RelationField) ISushkaResultDo
	Preload(fields ...field.RelationField) ISushkaResultDo
	FirstOrInit() (*models.SushkaResult, error)
	FirstOrCreate() (*models.SushkaResult, error)
	FindByPage(offset int, limit int) (result []*models.SushkaResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISushkaResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sushkaResultDo) Debug() ISushkaResultDo {
	return s.withDO(s.DO.Debug())
}

func (s sushkaResultDo) WithContext(ctx context.Context) ISushkaResultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sushkaResultDo) ReadDB() ISushkaResultDo {
	return s.Clauses(dbresolver.Read)
}

func (s sushkaResultDo) WriteDB() ISushkaResultDo {
	return s.Clauses(dbresolver.Write)
}

func (s sushkaResultDo) Session(config *gorm.Session) ISushkaResultDo {
	return s.withDO(s.DO.Session(config))
}

func (s sushkaResultDo) Clauses(conds ...clause.Expression) ISushkaResultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sushkaResultDo) Returning(value interface{}, columns ...string) ISushkaResultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sushkaResultDo) Not(conds ...gen.Condition) ISushkaResultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sushkaResultDo) Or(conds ...gen.Condition) ISushkaResultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sushkaResultDo) Select(conds ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sushkaResultDo) Where(conds ...gen.Condition) ISushkaResultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sushkaResultDo) Order(conds ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sushkaResultDo) Distinct(cols ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sushkaResultDo) Omit(cols ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sushkaResultDo) Join(table schema.Tabler, on ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sushkaResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sushkaResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sushkaResultDo) Group(cols ...field.Expr) ISushkaResultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sushkaResultDo) Having(conds ...gen.Condition) ISushkaResultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sushkaResultDo) Limit(limit int) ISushkaResultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sushkaResultDo) Offset(offset int) ISushkaResultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sushkaResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISushkaResultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sushkaResultDo) Unscoped() ISushkaResultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sushkaResultDo) Create(values ...*models.SushkaResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sushkaResultDo) CreateInBatches(values []*models.SushkaResult, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sushkaResultDo) Save(values ...*models.SushkaResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sushkaResultDo) First() (*models.SushkaResult, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SushkaResult), nil
	}
}

func (s sushkaResultDo) Take() (*models.SushkaResult, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SushkaResult), nil
	}
}

func (s sushkaResultDo) Last() (*models.SushkaResult, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SushkaResult), nil
	}
}

func (s sushkaResultDo) Find() ([]*models.SushkaResult, error) {
	result, err := s.DO.Find()
	return result.([]*models.SushkaResult), err
}

func (s sushkaResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SushkaResult, err error) {
	buf := make([]*models.SushkaResult, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sushkaResultDo) FindInBatches(result *[]*models.SushkaResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sushkaResultDo) Attrs(attrs ...field.AssignExpr) ISushkaResultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sushkaResultDo) Assign(attrs ...field.AssignExpr) ISushkaResultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sushkaResultDo) Joins(fields ...field.RelationField) ISushkaResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sushkaResultDo) Preload(fields ...field.RelationField) ISushkaResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sushkaResultDo) FirstOrInit() (*models.SushkaResult, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SushkaResult), nil
	}
}

func (s sushkaResultDo) FirstOrCreate() (*models.SushkaResult, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SushkaResult), nil
	}
}

func (s sushkaResultDo) FindByPage(offset int, limit int) (result []*models.SushkaResult, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sushkaResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sushkaResultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sushkaResultDo) Delete(models ...*models.SushkaResult) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sushkaResultDo) withDO(do gen.Dao) *sushkaResultDo {
	s.DO = *do.(*gen.DO)
	return s
}
