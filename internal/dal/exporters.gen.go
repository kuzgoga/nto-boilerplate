// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"github.com/kuzgoga/nto-boilerplate/internal/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newExporter(db *gorm.DB, opts ...gen.DOOption) exporter {
	_exporter := exporter{}

	_exporter.exporterDo.UseDB(db, opts...)
	_exporter.exporterDo.UseModel(&models.Exporter{})

	tableName := _exporter.exporterDo.TableName()
	_exporter.ALL = field.NewAsterisk(tableName)
	_exporter.Id = field.NewUint(tableName, "id")
	_exporter.Name = field.NewString(tableName, "name")
	_exporter.Description = field.NewString(tableName, "description")
	_exporter.Receivers = exporterHasManyReceivers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Receivers", "models.Receiver"),
		Exporter: struct {
			field.RelationField
			Receivers struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Receivers.Exporter", "models.Exporter"),
			Receivers: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Receivers.Exporter.Receivers", "models.Receiver"),
			},
		},
		Spec: struct {
			field.RelationField
			Receivers struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Receivers.Spec", "models.WoodSpecType"),
			Receivers: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Receivers.Spec.Receivers", "models.Receiver"),
			},
		},
	}

	_exporter.fillFieldMap()

	return _exporter
}

type exporter struct {
	exporterDo

	ALL         field.Asterisk
	Id          field.Uint
	Name        field.String
	Description field.String
	Receivers   exporterHasManyReceivers

	fieldMap map[string]field.Expr
}

func (e exporter) Table(newTableName string) *exporter {
	e.exporterDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exporter) As(alias string) *exporter {
	e.exporterDo.DO = *(e.exporterDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exporter) updateTableName(table string) *exporter {
	e.ALL = field.NewAsterisk(table)
	e.Id = field.NewUint(table, "id")
	e.Name = field.NewString(table, "name")
	e.Description = field.NewString(table, "description")

	e.fillFieldMap()

	return e
}

func (e *exporter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exporter) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["id"] = e.Id
	e.fieldMap["name"] = e.Name
	e.fieldMap["description"] = e.Description

}

func (e exporter) clone(db *gorm.DB) exporter {
	e.exporterDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exporter) replaceDB(db *gorm.DB) exporter {
	e.exporterDo.ReplaceDB(db)
	return e
}

type exporterHasManyReceivers struct {
	db *gorm.DB

	field.RelationField

	Exporter struct {
		field.RelationField
		Receivers struct {
			field.RelationField
		}
	}
	Spec struct {
		field.RelationField
		Receivers struct {
			field.RelationField
		}
	}
}

func (a exporterHasManyReceivers) Where(conds ...field.Expr) *exporterHasManyReceivers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a exporterHasManyReceivers) WithContext(ctx context.Context) *exporterHasManyReceivers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a exporterHasManyReceivers) Session(session *gorm.Session) *exporterHasManyReceivers {
	a.db = a.db.Session(session)
	return &a
}

func (a exporterHasManyReceivers) Model(m *models.Exporter) *exporterHasManyReceiversTx {
	return &exporterHasManyReceiversTx{a.db.Model(m).Association(a.Name())}
}

type exporterHasManyReceiversTx struct{ tx *gorm.Association }

func (a exporterHasManyReceiversTx) Find() (result []*models.Receiver, err error) {
	return result, a.tx.Find(&result)
}

func (a exporterHasManyReceiversTx) Append(values ...*models.Receiver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a exporterHasManyReceiversTx) Replace(values ...*models.Receiver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a exporterHasManyReceiversTx) Delete(values ...*models.Receiver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a exporterHasManyReceiversTx) Clear() error {
	return a.tx.Clear()
}

func (a exporterHasManyReceiversTx) Count() int64 {
	return a.tx.Count()
}

type exporterDo struct{ gen.DO }

type IExporterDo interface {
	gen.SubQuery
	Debug() IExporterDo
	WithContext(ctx context.Context) IExporterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExporterDo
	WriteDB() IExporterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExporterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExporterDo
	Not(conds ...gen.Condition) IExporterDo
	Or(conds ...gen.Condition) IExporterDo
	Select(conds ...field.Expr) IExporterDo
	Where(conds ...gen.Condition) IExporterDo
	Order(conds ...field.Expr) IExporterDo
	Distinct(cols ...field.Expr) IExporterDo
	Omit(cols ...field.Expr) IExporterDo
	Join(table schema.Tabler, on ...field.Expr) IExporterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExporterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExporterDo
	Group(cols ...field.Expr) IExporterDo
	Having(conds ...gen.Condition) IExporterDo
	Limit(limit int) IExporterDo
	Offset(offset int) IExporterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExporterDo
	Unscoped() IExporterDo
	Create(values ...*models.Exporter) error
	CreateInBatches(values []*models.Exporter, batchSize int) error
	Save(values ...*models.Exporter) error
	First() (*models.Exporter, error)
	Take() (*models.Exporter, error)
	Last() (*models.Exporter, error)
	Find() ([]*models.Exporter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Exporter, err error)
	FindInBatches(result *[]*models.Exporter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Exporter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExporterDo
	Assign(attrs ...field.AssignExpr) IExporterDo
	Joins(fields ...field.RelationField) IExporterDo
	Preload(fields ...field.RelationField) IExporterDo
	FirstOrInit() (*models.Exporter, error)
	FirstOrCreate() (*models.Exporter, error)
	FindByPage(offset int, limit int) (result []*models.Exporter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExporterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exporterDo) Debug() IExporterDo {
	return e.withDO(e.DO.Debug())
}

func (e exporterDo) WithContext(ctx context.Context) IExporterDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exporterDo) ReadDB() IExporterDo {
	return e.Clauses(dbresolver.Read)
}

func (e exporterDo) WriteDB() IExporterDo {
	return e.Clauses(dbresolver.Write)
}

func (e exporterDo) Session(config *gorm.Session) IExporterDo {
	return e.withDO(e.DO.Session(config))
}

func (e exporterDo) Clauses(conds ...clause.Expression) IExporterDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exporterDo) Returning(value interface{}, columns ...string) IExporterDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exporterDo) Not(conds ...gen.Condition) IExporterDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exporterDo) Or(conds ...gen.Condition) IExporterDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exporterDo) Select(conds ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exporterDo) Where(conds ...gen.Condition) IExporterDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exporterDo) Order(conds ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exporterDo) Distinct(cols ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exporterDo) Omit(cols ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exporterDo) Join(table schema.Tabler, on ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exporterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExporterDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exporterDo) RightJoin(table schema.Tabler, on ...field.Expr) IExporterDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exporterDo) Group(cols ...field.Expr) IExporterDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exporterDo) Having(conds ...gen.Condition) IExporterDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exporterDo) Limit(limit int) IExporterDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exporterDo) Offset(offset int) IExporterDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exporterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExporterDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exporterDo) Unscoped() IExporterDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exporterDo) Create(values ...*models.Exporter) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exporterDo) CreateInBatches(values []*models.Exporter, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exporterDo) Save(values ...*models.Exporter) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exporterDo) First() (*models.Exporter, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Exporter), nil
	}
}

func (e exporterDo) Take() (*models.Exporter, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Exporter), nil
	}
}

func (e exporterDo) Last() (*models.Exporter, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Exporter), nil
	}
}

func (e exporterDo) Find() ([]*models.Exporter, error) {
	result, err := e.DO.Find()
	return result.([]*models.Exporter), err
}

func (e exporterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Exporter, err error) {
	buf := make([]*models.Exporter, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exporterDo) FindInBatches(result *[]*models.Exporter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exporterDo) Attrs(attrs ...field.AssignExpr) IExporterDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exporterDo) Assign(attrs ...field.AssignExpr) IExporterDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exporterDo) Joins(fields ...field.RelationField) IExporterDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exporterDo) Preload(fields ...field.RelationField) IExporterDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exporterDo) FirstOrInit() (*models.Exporter, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Exporter), nil
	}
}

func (e exporterDo) FirstOrCreate() (*models.Exporter, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Exporter), nil
	}
}

func (e exporterDo) FindByPage(offset int, limit int) (result []*models.Exporter, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exporterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exporterDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exporterDo) Delete(models ...*models.Exporter) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exporterDo) withDO(do gen.Dao) *exporterDo {
	e.DO = *do.(*gen.DO)
	return e
}
